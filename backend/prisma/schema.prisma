// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExerciseCategory {
  strength
  aerobic
  flexibility
}

enum MuscleGroup {
  chest
  back
  legs
  arms
  shoulders
  core
  glutes
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  workouts  Workout[]
}

model Exercise {
  id             Int               @id @default(autoincrement())
  name           String            @unique
  description    String
  category       ExerciseCategory
  muscleGroups   MuscleGroup[]
  workoutExercises WorkoutExercise[]
}

model Workout {
  id          Int       @id @default(autoincrement())
  userId      Int
  name        String
  notes       String?
  scheduledAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises   WorkoutExercise[]
}

model WorkoutExercise {
  id         Int       @id @default(autoincrement())
  workoutId  Int
  exerciseId Int
  comment    String?

  
  strength   StrengthWorkoutExercise?
  aerobic    AerobicWorkoutExercise?
  flexibility FlexibilityWorkoutExercise?

  workout    Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise   Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([workoutId, exerciseId])
}
model StrengthWorkoutExercise {
  id        Int      @id
  sets      Int
  reps      Int
  weight    Float

  base      WorkoutExercise @relation(fields: [id], references: [id], onDelete: Cascade)
}

model FlexibilityWorkoutExercise {
  id    Int @id
  sets  Int
  reps  Int

  base  WorkoutExercise @relation(fields: [id], references: [id], onDelete: Cascade)
}

model AerobicWorkoutExercise {
  id       Int @id
  duration Int   // seconds
  distance Float // km/miles

  base     WorkoutExercise @relation(fields: [id], references: [id], onDelete: Cascade)
}
